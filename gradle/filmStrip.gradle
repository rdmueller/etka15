/*
 * Copyright 2014, 2015 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import geb.report.ReporterSupport
import groovy.xml.MarkupBuilder
import geb.report.ReportState
import geb.report.Reporter
import groovy.json.JsonOutput

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.gebish:geb-spock:0.10.0"
    }
}

println "FilmStrip: monkey patch for geb.report.Reporter"
ReporterSupport.metaClass.static.toTestReportLabel={
    int testCounter,
    int reportCounter,
    String methodName,
    String label ->
    //escape dashes...
        "${testCounter}-${reportCounter}-${methodName.replaceAll('-','--')}-${label.replaceAll('-','--')}"
}
/**
println "FilmStrip: monkey patch for com.athaydes.spockframework.report.SpecInfoListener"

com.athaydes.spockframework.report.SpecInfoListener.metaClass.classNode.onReport = {
    Reporter reporter, ReportState reportState, List<File> reportFiles ->
        System.out.println "yep!"
}
**/
//Script to convert ouput from geb.ReportingListener into something structured
task convertJsonReport() {

    outputs.upToDateWhen { false }  // Always run conversion
    doLast {
        def reportsDir = "build/reports/geb/"
        def thisPath = new File('.').canonicalPath.replaceAll('\\\\','/')
        def gebReports = new File(reportsDir, "gebReportInfo.json").text.replaceAll('\\\\','/')
        def allReports = [specs:[]]
        def jsonSlurper = new JsonSlurper()
        gebReports.eachLine { json ->
            def reportLine = jsonSlurper.parseText(json)
            if (!(reportLine.spec.label in allReports.specs.label)) {
                allReports.specs << [label:reportLine.spec.label,tests:[]]
            }
            def spec = allReports.specs.find { spec -> spec.label==reportLine.spec.label }
            if (!(reportLine.spec.test.num in spec.tests.num)) {
                spec.tests << [
                    num:reportLine.spec.test.num,
                    label: reportLine.spec.test.label,
                    reports: []
                ]
            }
            def test = spec.tests.find { test -> test.num==reportLine.spec.test.num }
            if (!(reportLine.spec.test.report.num in test.reports.num)) {
                test.reports << [
                    time:reportLine.spec.test.report.time,
                    num:reportLine.spec.test.report.num,
                    label:reportLine.spec.test.report.label,
                    url:reportLine.spec.test.report.url,
                    files:[]
                ]
                println "**** new report"
            } else {
                println "**** old report"
            }
            def report = test.reports.find { report -> report.num==reportLine.spec.test.report.num }
            if (!(reportLine.spec.test.report.files in report.files)) {
                report.files += reportLine.spec.test.report.files.collect{"."+it.replaceAll('//','/')-thisPath-reportsDir}
            } else {
                println "*"*80
                println report.files.toString()
            }
        }

        def newJson = JsonOutput.toJson(allReports)
        new File(reportsDir, "gebReportInfo2.json").write(JsonOutput.prettyPrint(newJson))
    }
}
